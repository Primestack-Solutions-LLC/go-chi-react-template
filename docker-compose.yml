services:
  postgres:
    image: 'postgres:latest'
    restart: always
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: password
      POSTGRES_DB: {{PROJECT_NAME}}_dev
    ports:
      - "5432:5432"
  super-tokens-postgres:
    image: 'postgres:latest'
    environment:
      POSTGRES_USER: supertokens_user
      POSTGRES_PASSWORD: somePassword
      POSTGRES_DB: supertokens
    ports:
      - "5433:5432"
    networks:
      - app_network
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'pg_isready', '-U', 'supertokens_user', '-d', 'supertokens']
      interval: 5s
      timeout: 5s
      retries: 5
  redis:
    image: redis:latest
    restart: always
    ports:
      - "6379:6379"
    command: redis-server --loglevel warning
    volumes:
      - cache:/data
  supertokens:
    image: registry.supertokens.io/supertokens/supertokens-postgresql
    depends_on:
      super-tokens-postgres:
        condition: service_healthy
    ports:
      - "3567:3567"
    environment:
      POSTGRESQL_CONNECTION_URI: "postgresql://supertokens_user:somePassword@super-tokens-postgres:5432/supertokens"
      API_KEYS: "api-xcKUodgDS5Bdt5yyhUOeKIwInNsp9LvtGECwEqWQKyPDRhQjTZzXFAVfGoKh"
    networks:
      - app_network
    restart: unless-stopped
    healthcheck:
      test: >
        bash -c 'exec 3<>/dev/tcp/127.0.0.1/3567 && echo -e "GET /hello HTTP/1.1\r\nhost: 127.0.0.1:3567\r\nConnection: close\r\n\r\n" >&3 && cat <&3 | grep "Hello"'
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  app_network:
    driver: bridge

volumes:
  cache:
    driver: local
